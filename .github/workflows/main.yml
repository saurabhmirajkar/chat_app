# name: "Build Check"

# on:
#   pull_request:
#     branches:
#       - main
#       - master
#   push:
#     branches:
#       - main
#       - master

# jobs:  
#   build:      
#     name: Build & Release
#     runs-on: macos-latest
#     steps:
#         #1 Checkout Repository
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#         #2 Setup Java
#       - name: Set Up Java
#         uses: actions/setup-java@v3.12.0
#         with:
#           distribution: 'oracle'
#           java-version: '17'

#         #3 Setup Flutter
#       - name: Set Up Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.32.2'
#           channel: 'stable'

#         #4 Install Dependencies
#       - name: Install Dependencies
#         run: flutter pub get

#         #5 Setup Keystore
#       - name: Decode Keystore
#         run: |
#           if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then
#             echo "KEYSTORE_BASE64 secret is not set" && exit 1
#           fi
#           echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          
#       - name: Create key.properties
#         run: |
#           echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
#           echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
#           echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
#           echo "storeFile=upload-keystore.jks" >> android/key.properties
        
#        #6 Building APK
#       - name: Build APK
#         run: flutter build apk --release

#         #7 Building App Bundle (aab)
#       - name: Build appBundle
#         run: flutter build appbundle

#         #8 Build IPA ( IOS Build )
#       - name: Build IPA
#         run: flutter build ipa --no-codesign

#       - name: Compress Archives and IPAs
#         run: |
#           cd build
#           tar -czf ios_build.tar.gz ios

#         #9 Upload Artifacts
#       - name: Upload Artifacts
#         uses: actions/upload-artifact@v4.3.1
#         with:
#           name: Releases
#           path: |
#             build/app/outputs/flutter-apk/app-release.apk
#             build/app/outputs/bundle/release/app-release.aab
#             build/ios_build.tar.gz

#         #10 Extract Version
#       - name: Extract version from pubspec.yaml
#         id: extract_version
#         run: |
#           version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
#           echo "VERSION=$version" >> $GITHUB_ENV

#         #11 Check if Tag Exists
#       - name: Check if Tag Exists
#         id: check_tag
#         run: |
#           if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
#             echo "TAG_EXISTS=true" >> $GITHUB_ENV
#           else
#             echo "TAG_EXISTS=false" >> $GITHUB_ENV
#           fi

#         #12 Modify Tag if it Exists
#       - name: Modify Tag
#         if: env.TAG_EXISTS == 'true'
#         id: modify_tag
#         run: |
#           new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
#           echo "VERSION=$new_version" >> $GITHUB_ENV
        
#         #13 Create Release
#       - name: Create Release
#         uses: ncipollo/release-action@v1
#         with:
#           artifacts: "build/app/outputs/flutter-apk/app-release.apk,build/app/outputs/bundle/release/app-release.aab,build/ios_build.tar.gz"
#           tag: v${{ env.VERSION }}
#           token: ${{ secrets.GITHUB_TOKEN }}


name: Flutter CI

on:
  push:
    branches: ['**']
    tags: ['*']
  pull_request:
    branches: ['**']
  release:
    types: [published]

jobs:
  build_android:
    name: Build Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.2'
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      - name: Decode upload-keystore.jks
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks

      - name: Create key.properties
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          echo "storePassword=$KEYSTORE_PASSWORD" > android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "storeFile=upload-keystore.jks" >> android/key.properties

      - name: Build Android release APK
        run: flutter build apk --release

      - name: Upload Android APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-android.apk
          path: build/app/outputs/flutter-apk/app-release.apk

  build_ios:
    name: Build iOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.2'
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get
      
      - name: Clean DerivedData & iOS Pods
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          cd ios && pod deintegrate && rm -rf Pods Podfile.lock && pod install --repo-update

      - name: Run CocoaPods install
        run: pod install --project-directory=ios

      - name: Build iOS (no codesign)
        run: flutter build ios --release --no-codesign

      - name: Upload iOS build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-ios
          path: build/ios/iphoneos/Runner.app
